@startuml dynamic_import_module

title Activity Diagram of the Function pos.utils.dynamic_import.import_module()

start

:<b>Path</b> - string, path to the module, e.g. 'library.package.module'
<b>Alias</b> - (optional) string, name of the alias to be used for the imported module
<b>Globals</b> - (optional), dictionary representing the global symbol table of the 'caller' module, if not given or None, the reference to the module is placed into the namespace of the <b><i>fsio_lib.dynamic_import</i></b>  module<

if (arguments are of the proper type?) then (Yes)
    if (<b>Globals</b> is not provided or None?) then (Yes)
        :<b>Globals</b> = <b>globals</b>() - i.e. the <b><i>fsio_lib.dynamic_import</i></b>  module's
        namespace global symbol table;
    endif
    
    :import the module using built-in function <b>importlib.import_module</b>()
    store reference to in the <b>Module</b> variable;
    
    if (<b>Alias</b> is given (not None)?) then (Yes)
        :extract the name of the 'top package' containing
        the module, i.e. the first element of splitting the
        <b>Path</b> by '.' (dot) -> <b>TopName</b> string;
        
        :get reference to the 'top package' module as
        <b>sys.modules[TopName]</b> and store it in the
        <b>Globals</b> dictionary with <b>TopName</b> as the key;
    else (No)
        :store reference to the module in the
        <b>Globals</b> dictionary with <b>Alias</b> as the key;
    endif
    
    :return <b>Module</b> - reference to the imported module>
    
    stop
else (False)
    :raise <b>TypeError</b> ;
    
    stop
endif

@enduml